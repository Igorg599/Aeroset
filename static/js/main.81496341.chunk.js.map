{"version":3,"sources":["services/eventBus/EventBus.ts","views/components/base/scene/base/SceneRootApi.ts","services/apiProvider/ApiProvider.ts","services/windowPanelsService/windowPanels/PointCloudFiltersWindow.ts","services/windowPanelsService/windowPanels/base/WindowPanel.ts","services/windowPanelsService/WindowPanelTypes.ts","services/windowPanelsService/windowPanels/WindowPanelProvider.ts","environment/ioc/IoC.ts","views/components/base/scene/setup/scene/setupScene.ts","views/components/base/scene/setup/scene/setupAxis.ts","views/components/base/scene/setup/scene/setupZoom.ts","store/ui/sections/pointCloudSection/pointCloudSection.ts","store/ui/panels/pointCloudFiltersPanel/pointCloudFiltersPanel.ts","store/store.ts","store/rootReducer.ts","store/ui/uiReducer.ts","store/ui/sections/uiSectionsReducer.ts","store/ui/panels/uiPanelsReducer.ts","store/loadState.ts","views/components/base/scene/WindowPanels.tsx","views/components/base/scene/pointCloudSystem/SolidPoint.ts","utilities/math/calculateMaxMinOfArray.ts","views/components/base/scene/pointCloudSystem/filterPointCloud.ts","views/components/base/scene/pointCloudSystem/constructPointCloud.ts","views/components/base/scene/pointCloudSystem/PointCloud.tsx","views/components/base/scene/pointCloudSystem/setUpPointCloud.ts","views/components/base/scene/Scene.tsx","utilities/dom/isCanvasSupported.ts","views/components/base/scene/setup/camera/setupCamera.ts","views/components/base/scene/setup/light/setupLight.ts","views/components/base/statePanel/StatePanel.tsx","views/components/base/instrumentalPanel/InstrumentalPanel.tsx","views/components/sidePanels/temporarySidePanel.js","views/components/base/headerPanel/HeaderPanel.js","views/App.tsx","serviceWorker.js","index.tsx"],"names":["EventBus","injectable","eventEmitter","EventEmitter2","event","action","this","on","removeListener","values","emit","SceneRootApi","_engine","_scene","_camera","_light","_pointsCloudSystem","value","ApiProvider","_sceneRootApi","PointCloudFiltersWindow","Symbol","for","WindowPanelTypes","WindowPanelsProvider","windowPanelType","Error","IoC","Container","autoBindInjectable","defaultScope","skipBaseClassChecks","bind","to","inSingletonScope","setupScene","engine","scene","BABYLON","clearColor","sceneBase","size","makeTextPlane","text","color","dynamicTexture","hasAlpha","drawText","plane","mesh","CreatePlane","standardMaterial","specularColor","diffuseTexture","material","backFaceCulling","CreateLines","Zero","position","setupAxis","runRenderLoop","render","window","addEventListener","resize","setupZoom","camera","totalZoom","zoomTarget","onPointerObservable","add","eventData","_","delta","Math","max","min","wheelDelta","detail","deltaY","totalX","abs","orthoLeft","orthoRight","totalY","orthoTop","orthoBottom","aspectRatio","ratio","x","y","panningSensibility","zoom2DView","POINTERWHEEL","Unproject","pointerX","pointerY","getRenderWidth","getRenderHeight","getWorldMatrix","getViewMatrix","getProjectionMatrix","POINTERMOVE","slice","createSlice","name","initialState","isActive","pointsCloudFile","reducers","pointCloudLoadFile","state","update","$set","payload","showPointCloudFiltersPanel","closePointCloudFiltersPanel","actions","reducer","filterXFromLimit","filterXToLimit","filterYFromLimit","filterYToLimit","filterZFromLimit","filterZToLimit","changeXFromLimit","changeXToLimit","changeYFromLimit","changeYToLimit","changeZFromLimit","changeZToLimit","getPointCloudFiltersPanelSelector","ui","panels","pointCloudFiltersPanel","store","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","configureStore","combineReducers","sections","pointCloudSection","pointCloudSectionReducer","preloadedState","middleware","logger","devTools","process","useAppDispatch","useDispatch","dataSelector","createSelector","filtersState","WindowPanels","dispatch","props","useSelector","filter","style","height","width","background","pointerEvents","bounds","handle","borderRadius","visibility","cursor","borderTopLeftRadius","borderTopRightRadius","textAlign","marginLeft","alignContent","display","Typography","variant","Tooltip","title","float","IconButton","component","onClick","marginTop","TextField","id","label","type","step","onChange","target","isNumeric","InputLabelProps","shrink","inputProps","SolidPoint","z","parameter","_x","_y","_z","_parameter","calculateMinMaxOfArray","array","arrayLength","length","arrayCounter","lastBottomBorder","lastTopBorder","minValue","maxValue","arrayPart","filterPointCloud","points","cloudPointFilters","point","constructPointCloud","parameterMin","parameterMax","a","filteredPoints","pointsCloudSystem","updatable","diffP","constructParticle","particle","i","pPercent","r","g","b","pointsCount","addPoints","buildMeshAsync","pointCloudFilters","file","PointCloud","cloudPointFile","reader","FileReader","onload","e","fileLines","result","split","forEach","line","push","map","Number","parseFloat","replace","p","parameters","apiProvider","get","sceneRootApi","dispose","blob","readAsText","setUpPointCloud","Scene","initialize","canvas","elem","document","createElement","getContext","isCanvasSupported","console","log","alert","setPosition","attachControl","alpha","PI","mode","ORTHOGRAPHIC_CAMERA","lowerRadiusLimit","radius","upperRadiusLimit","setupCamera","light","intensity","setupLight","theme","createMuiTheme","palette","primary","main","dark","contrastText","secondary","outline","margin","ref","undefined","StatePanel","InstrumentalPanel","redTheme","green","preventDefault","files","htmlFor","verticalAlign","makeStyles","list","fullList","useStyles","HeaderPanel","classes","useState","top","left","bottom","right","setState","toggleDrawer","anchor","open","key","default","justifyContent","Fragment","Drawer","onClose","className","clsx","role","onKeyDown","fontSize","flexboxgrid","gridSize","gutterWidth","outerMargin","mediaQuery","container","sm","md","lg","breakpoints","xs","App","innerWidth","innerHeight","fluid","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","getElementById","URL","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.81496341.chunk.js","sourcesContent":["import {injectable} from \"inversify\";\r\nimport {EventEmitter2} from \"eventemitter2\";\r\nimport {EventBusService} from \"./EventBusService\";\r\nimport {EventListenerFn} from \"./EventListenerFn\";\r\n\r\n@injectable()\r\nclass EventBus implements EventBusService {\r\n    protected eventEmitter: EventEmitter2 = new EventEmitter2();\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    subscribe(event: string, action: EventListenerFn): void {\r\n        this.eventEmitter.on(event, action,);\r\n    }\r\n\r\n    unsubscribe(event: string, action: EventListenerFn): void {\r\n        this.eventEmitter.removeListener(event, action);\r\n    }\r\n\r\n    send(event: string, ...values: any[]): void {\r\n        this.eventEmitter.emit(event, values);\r\n    }\r\n}\r\n\r\nexport default EventBus","import {Engine} from \"babylonjs/Engines/engine\";\r\nimport {ArcRotateCamera} from \"babylonjs/Cameras/arcRotateCamera\";\r\nimport {Light} from \"babylonjs/Lights/light\";\r\nimport {Scene} from \"babylonjs/scene\";\r\nimport {PointsCloudSystem} from \"babylonjs/Particles/pointsCloudSystem\";\r\n\r\nexport default class SceneRootApi {\r\n    private _engine: Engine | null = null;\r\n    private _scene: Scene | null = null;\r\n    private _camera: ArcRotateCamera | null = null;\r\n    private _light: Light | null = null\r\n    private _pointsCloudSystem: PointsCloudSystem | null = null\r\n\r\n    get pointsCloudSystem(): PointsCloudSystem | null {\r\n        return this._pointsCloudSystem;\r\n    }\r\n    set pointsCloudSystem(value: PointsCloudSystem | null) {\r\n        this._pointsCloudSystem = value;\r\n    }\r\n    get light(): Light | null {\r\n        return this._light;\r\n    }\r\n\r\n    set light(value: Light | null) {\r\n        this._light = value;\r\n    }\r\n\r\n    get camera(): ArcRotateCamera | null {\r\n        return this._camera;\r\n    }\r\n\r\n    set camera(value: ArcRotateCamera | null) {\r\n        this._camera = value;\r\n    }\r\n\r\n    get scene(): Scene | null {\r\n        return this._scene;\r\n    }\r\n\r\n    set scene(value: Scene | null) {\r\n        this._scene = value;\r\n    }\r\n\r\n    set engine(value: Engine | null) {\r\n        this._engine = value;\r\n    }\r\n\r\n    get engine(): Engine | null {\r\n        return this._engine;\r\n    }\r\n}","import {injectable} from \"inversify\";\r\nimport SceneRootApi from \"../../views/components/base/scene/base/SceneRootApi\";\r\n\r\n@injectable()\r\nclass ApiProvider {\r\n    private _sceneRootApi : SceneRootApi = new SceneRootApi();\r\n\r\n    get sceneRootApi(): SceneRootApi {\r\n        return this._sceneRootApi;\r\n    }\r\n}\r\nexport default ApiProvider;\r\n","import WindowPanel from \"./base/WindowPanel\";\r\n\r\nexport default class PointCloudFiltersWindow extends WindowPanel{\r\n\r\n\r\n    public close(){\r\n\r\n    }\r\n}","import {IWindowPanel} from \"./IWindowPanel\";\r\n\r\nexport default class WindowPanel implements IWindowPanel {\r\n    close(): void {\r\n    }\r\n\r\n    getType(): Symbol {\r\n        return Symbol.for(\"dfs\");\r\n    }\r\n\r\n}","let WindowPanelTypes = {\r\n    PointCloudFiltersWindow: Symbol.for(\"PointCloudFiltersWindow\")\r\n};\r\n\r\nexport default WindowPanelTypes;","import {WindowPanelsService} from \"../WindowPanelsService\";\r\nimport WindowPanel from \"./base/WindowPanel\";\r\nimport PointCloudFiltersWindow from \"./PointCloudFiltersWindow\";\r\nimport WindowPanelTypes from \"../WindowPanelTypes\";\r\nimport { injectable } from \"inversify\";\r\n\r\n@injectable()\r\nexport default class WindowPanelsProvider implements WindowPanelsService{\r\n    showWindowPanel(windowPanelType: Symbol): WindowPanel {\r\n        switch (windowPanelType){\r\n            case WindowPanelTypes.PointCloudFiltersWindow :\r\n                return new PointCloudFiltersWindow();\r\n                break;\r\n            default:\r\n                throw new Error(\"Unknown panelWindow type\")\r\n        }\r\n    }\r\n\r\n    closeWindowPanel(windowPanelType: Symbol): void {\r\n    }\r\n\r\n    windowIsOpened(windowPanelType: Symbol): boolean {\r\n        return false;\r\n    }\r\n\r\n}","import \"reflect-metadata\";\r\nimport EventBus from '../../services/eventBus/EventBus';\r\nimport ApiProvider from \"../../services/apiProvider/ApiProvider\";\r\nimport {EventBusService} from \"../../services/eventBus/EventBusService\";\r\nimport {Container, decorate, injectable} from \"inversify\";\r\nimport {WindowPanelsService} from \"../../services/windowPanelsService/WindowPanelsService\";\r\nimport WindowPanelsProvider from \"../../services/windowPanelsService/windowPanels/WindowPanelProvider\";\r\n\r\nconst IoC = new Container({\r\n    autoBindInjectable: true,\r\n    defaultScope: \"Singleton\",\r\n    skipBaseClassChecks: true\r\n});\r\n\r\nIoC.bind<EventBusService>(Symbol.for(\"EVENT_BUS_SERVICE\")).to(EventBus).inSingletonScope();\r\nIoC.bind<WindowPanelsService>(Symbol.for(\"WINDOW_PANELS_SERVICE\")).to(WindowPanelsProvider).inSingletonScope();\r\nIoC.bind<ApiProvider>(Symbol.for(\"API_PROVIDER_SERVICE\")).to(ApiProvider).inSingletonScope();\r\n\r\nexport default IoC;\r\n","import * as BABYLON from \"babylonjs\";\r\nimport setupAxis from \"./setupAxis\";\r\nimport setupZoom from \"./setupZoom\";\r\nimport {Camera} from \"babylonjs/Cameras/camera\";\r\n\r\nexport default function setupScene(engine: BABYLON.Engine): BABYLON.Scene {\r\n    const scene: BABYLON.Scene = new BABYLON.Scene(engine);\r\n    scene.clearColor = new BABYLON.Color4(0 / 255, 166 / 255, 251 / 255, 1);\r\n\r\n    setupAxis(scene, 5);\r\n\r\n    engine.runRenderLoop(() => {\r\n        scene.render();\r\n    });\r\n    window.addEventListener(\"resize\", () => {\r\n        engine.resize();\r\n    });\r\n\r\n    return scene;\r\n}\r\n\r\n\r\n// /** Add map-like controls to an ArcRotate camera.\r\n//  * @param {BABYLON.Scene} scene\r\n//  * @param {module:babylonjs/Cameras/arcRotateCamera.ArcRotateCamera} camera\r\n//  */\r\n// function AddControls(scene, camera) {\r\n//\r\n//     camera.inertia = 0.2;\r\n//     camera.lowerRadiusLimit = 1;\r\n//     camera.upperRadiusLimit = 350;\r\n//     // camera.upperBetaLimit = Math.PI / 2 - 0.1;\r\n//     camera.angularSensibilityX = camera.angularSensibilityY = 500;\r\n//\r\n//     const plane =\r\n//         BABYLON.Plane.FromPositionAndNormal(BABYLON.Vector3.Zero(), BABYLON.Axis.Y);\r\n//\r\n//     const inertialPanning = BABYLON.Vector3.Zero();\r\n//\r\n//     /** @type {BABYLON.Vector3} */\r\n//     let initialPos;\r\n//     const panningFn = () => {\r\n//         return;\r\n//         const pos = getPosition(scene, camera, plane);\r\n//         panning(pos, initialPos, camera.inertia, inertialPanning);\r\n//     };\r\n//\r\n//     const inertialPanningFn = () => {\r\n//         if (inertialPanning.x !== 0 || inertialPanning.y !== 0 || inertialPanning.z !== 0) {\r\n//             camera.target.addInPlace(inertialPanning);\r\n//             inertialPanning.scaleInPlace(camera.inertia);\r\n//             zeroIfClose(inertialPanning);\r\n//         }\r\n//     };\r\n//\r\n//     const wheelPrecisionFn = () => {\r\n//         camera.wheelPrecision = 1 / camera.radius * 1000;\r\n//     };\r\n//\r\n//     const zoomFn = (p, e) => {\r\n//         const delta = zoomWheel(p, e, camera);\r\n//         zooming(delta, scene, camera, plane, inertialPanning);\r\n//     }\r\n//\r\n//     const prvScreenPos = BABYLON.Vector2.Zero();\r\n//     const rotateFn = () => {\r\n//         return;\r\n//         rotating(scene, camera, prvScreenPos);\r\n//     };\r\n//\r\n//     const removeObservers = () => {\r\n//         scene.onPointerObservable.removeCallback(panningFn);\r\n//         scene.onPointerObservable.removeCallback(rotateFn);\r\n//     }\r\n//\r\n//     scene.onPointerObservable.add((p, e) => {\r\n//         removeObservers();\r\n//         if (p.event.button === 0) {\r\n//             initialPos = getPosition(scene, camera, plane);\r\n//             scene.onPointerObservable.add(panningFn, BABYLON.PointerEventTypes.POINTERMOVE);\r\n//         } else {\r\n//             prvScreenPos.copyFromFloats(scene.pointerX, scene.pointerY);\r\n//             scene.onPointerObservable.add(rotateFn, BABYLON.PointerEventTypes.POINTERMOVE);\r\n//         }\r\n//     }, BABYLON.PointerEventTypes.POINTERDOWN);\r\n//\r\n//     scene.onPointerObservable.add((p, e) => {\r\n//         removeObservers();\r\n//     }, BABYLON.PointerEventTypes.POINTERUP);\r\n//\r\n//     scene.onPointerObservable.add(zoomFn, BABYLON.PointerEventTypes.POINTERWHEEL);\r\n//\r\n//     scene.onBeforeRenderObservable.add(inertialPanningFn);\r\n//     scene.onBeforeRenderObservable.add(wheelPrecisionFn);\r\n//\r\n//     // stop context menu showing on canvas right click\r\n//     scene.getEngine().getRenderingCanvas().addEventListener(\"contextmenu\", (e) => {\r\n//         e.preventDefault();\r\n//     });\r\n// }\r\n//\r\n// /** Get pos on plane.\r\n//  * @param {BABYLON.Scene} scene\r\n//  * @param {BABYLON.ArcRotateCamera} camera\r\n//  * @param {BABYLON.Plane} plane\r\n//  */\r\n// function getPosition(scene, camera, plane) {\r\n//     return null;\r\n//     const ray = scene.createPickingRay(\r\n//         scene.pointerX, scene.pointerY, BABYLON.Matrix.Identity(), camera, false);\r\n//     const distance = ray.intersectsPlane(plane);\r\n//\r\n//     // not using this ray again, so modifying its vectors here is fine\r\n//     return distance !== null ?\r\n//         ray.origin.addInPlace(ray.direction.scaleInPlace(distance)) : null;\r\n// }\r\n//\r\n// /** Return offsets for inertial panning given initialize and current\r\n//  * pointer positions.\r\n//  * @param {BABYLON.Vector3} newPos\r\n//  * @param {BABYLON.Vector3} initialPos\r\n//  * @param {number} inertia\r\n//  * @param {BABYLON.Vector3} ref\r\n//  */\r\n// function panning(newPos, initialPos, inertia, ref) {\r\n//     const directionToZoomLocation = initialPos.subtract(newPos);\r\n//     const panningX = directionToZoomLocation.x * (1 - inertia);\r\n//     const panningZ = directionToZoomLocation.z * (1 - inertia);\r\n//     ref.copyFromFloats(panningX, 0, panningZ);\r\n//     return ref;\r\n// };\r\n//\r\n// /** Get the wheel delta divided by the camera wheel precision.\r\n//  * @param {BABYLON.PointerInfoPre} p\r\n//  * @param {BABYLON.EventState} e\r\n//  * @param {BABYLON.ArcRotateCamera} camera\r\n//  */\r\n// function zoomWheel(p, e, camera) {\r\n//     const event = p.event;\r\n//     event.preventDefault();\r\n//     let delta = event.wheelDelta;\r\n//     //if (event.deltaY) {\r\n//     //    delta = -event.deltaY;\r\n//     //} else if (event.wheelDelta) {\r\n//     //    delta = event.wheelDelta;\r\n//     //} else if (event.detail) {\r\n//     //    delta = -event.detail;\r\n//     //}\r\n//     delta /= camera.wheelPrecision;\r\n//     return delta;\r\n// }\r\n//\r\n// /** Zoom to pointer position. Zoom amount determined by delta.\r\n//  * @param {number} delta\r\n//  * @param {BABYLON.Scene} scene\r\n//  * @param {BABYLON.ArcRotateCamera} camera\r\n//  * @param {BABYLON.Plane} plane\r\n//  * @param {BABYLON.Vector3} ref\r\n//  */\r\n// function zooming(delta, scene, camera, plane, ref) {\r\n//     // if (camera.radius - camera.lowerRadiusLimit < 1 && delta > 0) {\r\n//     //     return;\r\n//     // } else if (camera.upperRadiusLimit - camera.radius < 1 && delta < 0) {\r\n//     //     return;\r\n//     // }\r\n//     const inertiaComp = 1 - camera.inertia;\r\n//     if (camera.radius - (camera.inertialRadiusOffset + delta) / inertiaComp < camera.lowerRadiusLimit) {\r\n//         delta = (camera.radius - camera.lowerRadiusLimit) * inertiaComp - camera.inertialRadiusOffset;\r\n//     } else if (camera.radius - (camera.inertialRadiusOffset + delta) / inertiaComp >\r\n//         camera.upperRadiusLimit) {\r\n//         delta = (camera.radius - camera.upperRadiusLimit) * inertiaComp - camera.inertialRadiusOffset;\r\n//     }\r\n//\r\n//     const zoomDistance = delta / inertiaComp;\r\n//     const ratio = zoomDistance / camera.radius;\r\n//     const vec = getPosition(scene, camera, plane);\r\n//\r\n//     if (vec !== undefined && vec) {\r\n//         const directionToZoomLocation = vec.subtract(camera.target);\r\n//         const offset = directionToZoomLocation.scale(ratio);\r\n//         offset.scaleInPlace(inertiaComp);\r\n//         ref.addInPlace(offset);\r\n//     }\r\n//     camera.inertialRadiusOffset += delta;\r\n// }\r\n//\r\n// /** Rotate the camera\r\n//  * @param {BABYLON.Scene} scene\r\n//  * @param {BABYLON.Vector2} prvScreenPos\r\n//  * @param {BABYLON.ArcRotateCamera} camera\r\n//  */\r\n// function rotating(scene, camera, prvScreenPos) {\r\n//     const offsetX = scene.pointerX - prvScreenPos.x;\r\n//     const offsetY = scene.pointerY - prvScreenPos.y;\r\n//     prvScreenPos.copyFromFloats(scene.pointerX, scene.pointerY);\r\n//     changeInertialAlphaBetaFromOffsets(offsetX, offsetY, camera);\r\n// }\r\n//\r\n// /** Modifies the camera's inertial alpha and beta offsets.\r\n//  * @param {number} offsetX\r\n//  * @param {number} offsetY\r\n//  * @param {BABYLON.ArcRotateCamera} camera\r\n//  */\r\n// function changeInertialAlphaBetaFromOffsets(offsetX, offsetY, camera) {\r\n//     const alphaOffsetDelta = offsetX / camera.angularSensibilityX;\r\n//     const betaOffsetDelta = offsetY / camera.angularSensibilityY;\r\n//     camera.inertialAlphaOffset -= alphaOffsetDelta;\r\n//     camera.inertialBetaOffset -= betaOffsetDelta;\r\n// }\r\n//\r\n// /** Sets x y or z of passed in vector to zero if less than Epsilon.\r\n//  * @param {BABYLON.Vector3} vec\r\n//  */\r\n// function zeroIfClose(vec) {\r\n//     if (Math.abs(vec.x) < BABYLON.Epsilon) {\r\n//         vec.x = 0;\r\n//     }\r\n//     if (Math.abs(vec.y) < BABYLON.Epsilon) {\r\n//         vec.y = 0;\r\n//     }\r\n//     if (Math.abs(vec.z) < BABYLON.Epsilon) {\r\n//         vec.z = 0;\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n","import * as BABYLON from \"babylonjs\";\r\nimport {StandardMaterial} from \"babylonjs/Materials/standardMaterial\";\r\n\r\nexport default function setupAxis(sceneBase : BABYLON.Scene,  size:number){\r\n\r\n    const makeTextPlane = function (text: string, color: string, size: number, scene: BABYLON.Scene) {\r\n        const dynamicTexture = new BABYLON.DynamicTexture(\"DynamicTexture\", 50, scene, true);\r\n        dynamicTexture.hasAlpha = true;\r\n        dynamicTexture.drawText(text, 5, 40, \"bold 36px Arial\", color, \"transparent\", true);\r\n        const plane = mesh.CreatePlane(\"TextPlane\", size, scene, true);\r\n        let standardMaterial : StandardMaterial = new BABYLON.StandardMaterial(\"TextPlaneMaterial\", scene);\r\n        standardMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n        standardMaterial.diffuseTexture = dynamicTexture;\r\n        plane.material = standardMaterial;\r\n        plane.material.backFaceCulling = false;\r\n        return plane;\r\n    };\r\n\r\n    const mesh = BABYLON.Mesh;\r\n\r\n    const axisX = mesh.CreateLines(\"axisX\", [\r\n        BABYLON.Vector3.Zero(), new BABYLON.Vector3(size, 0, 0), new BABYLON.Vector3(size * 0.95, 0.05 * size, 0),\r\n        new BABYLON.Vector3(size, 0, 0), new BABYLON.Vector3(size * 0.95, -0.05 * size, 0)\r\n    ], sceneBase);\r\n    axisX.color = new BABYLON.Color3(1, 0, 0);\r\n    const xChar = makeTextPlane(\"X\", \"red\", size / 10, sceneBase);\r\n    xChar.position = new BABYLON.Vector3(0.9 * size, -0.05 * size, 0);\r\n    const axisY = mesh.CreateLines(\"axisY\", [\r\n        BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, size, 0), new BABYLON.Vector3(-0.05 * size, size * 0.95, 0),\r\n        new BABYLON.Vector3(0, size, 0), new BABYLON.Vector3(0.05 * size, size * 0.95, 0)\r\n    ], sceneBase);\r\n    axisY.color = new BABYLON.Color3(0, 1, 0);\r\n    const yChar = makeTextPlane(\"Y\", \"green\", size / 10, sceneBase);\r\n    yChar.position = new BABYLON.Vector3(0, 0.9 * size, -0.05 * size);\r\n    const axisZ = mesh.CreateLines(\"axisZ\", [\r\n        BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, 0, size), new BABYLON.Vector3(0, -0.05 * size, size * 0.95),\r\n        new BABYLON.Vector3(0, 0, size), new BABYLON.Vector3(0, 0.05 * size, size * 0.95)\r\n    ], sceneBase);\r\n    axisZ.color = new BABYLON.Color3(0, 0, 1);\r\n    const zChar = makeTextPlane(\"Z\", \"blue\", size / 10, sceneBase);\r\n    zChar.position = new BABYLON.Vector3(0, 0.05 * size, 0.9 * size);\r\n}","import {Scene} from \"babylonjs/scene\";\r\nimport * as BABYLON from \"babylonjs\";\r\nimport {Camera} from \"babylonjs/Cameras/camera\";\r\nimport {Vector3} from \"babylonjs/Maths/math.vector\";\r\nimport {Engine} from \"babylonjs/Engines/engine\";\r\nimport {ArcRotateCamera} from \"babylonjs/Cameras/arcRotateCamera\";\r\n\r\nexport default function setupZoom(scene: Scene, engine: Engine, camera: Camera){\r\n    let totalZoom = 0;\r\n    let zoomTarget : Vector3|null = null;\r\n\r\n    scene.onPointerObservable.add((eventData,_) => {\r\n        const event = eventData.event as any;\r\n        const delta = (Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail || event.deltaY)))) * 0.9;\r\n        if (delta > 0 && totalZoom < 14 || delta < 0) {\r\n            totalZoom += delta;\r\n            zoom2DView(camera, delta, zoomTarget);\r\n        }\r\n    }, BABYLON.PointerEventTypes.POINTERWHEEL);\r\n    scene.onPointerObservable.add(() => {\r\n        zoomTarget = BABYLON.Vector3.Unproject(\r\n            new BABYLON.Vector3(scene.pointerX, scene.pointerY, 0),\r\n            engine.getRenderWidth(),\r\n            engine.getRenderHeight(),\r\n            camera.getWorldMatrix(),\r\n            camera.getViewMatrix(),\r\n            camera.getProjectionMatrix()\r\n        );\r\n    }, BABYLON.PointerEventTypes.POINTERMOVE);\r\n}\r\n\r\nfunction zoom2DView(camera : Camera, delta : number, zoomTarget : Vector3|null){\r\n    const zoomingOut = delta < 0;\r\n\r\n    if (zoomTarget) {\r\n        const totalX = Math.abs(camera.orthoLeft! - camera.orthoRight!);\r\n        const totalY = Math.abs(camera.orthoTop! - camera.orthoBottom!);\r\n\r\n        const aspectRatio = totalY / totalX;\r\n\r\n        {\r\n            const fromCoord = camera.orthoLeft! - zoomTarget.x;\r\n            const ratio = fromCoord / totalX;\r\n            camera.orthoLeft! -= ratio * delta;\r\n        }\r\n\r\n        {\r\n            const fromCoord = camera.orthoRight! - zoomTarget.x;\r\n            const ratio = fromCoord / totalX;\r\n            camera.orthoRight! -= ratio * delta;\r\n        }\r\n\r\n        {\r\n            const fromCoord = camera.orthoTop! - zoomTarget.y;\r\n            const ratio = fromCoord / totalY;\r\n            camera.orthoTop! -= ratio * delta * aspectRatio;\r\n        }\r\n\r\n        {\r\n            const fromCoord = camera.orthoBottom! - zoomTarget.y;\r\n            const ratio = fromCoord / totalY;\r\n            camera.orthoBottom! -= ratio * delta * aspectRatio;\r\n        }\r\n\r\n        // decrease pan sensitivity the closer the zoom level.\r\n        (camera as ArcRotateCamera).panningSensibility = 6250 / Math.abs(totalX / 2);\r\n    }\r\n};","import {createSlice, PayloadAction, createEntityAdapter, Selector} from \"@reduxjs/toolkit\";\r\nimport {SectionState} from \"../base/SectionState\";\r\nimport update from \"immutability-helper\";\r\nimport {ApplicationState} from \"../../../store\";\r\n\r\nexport interface PointCloudSectionState extends SectionState {\r\n    pointsCloudFile: File | null;\r\n}\r\n\r\nconst defaultState: PointCloudSectionState = {\r\n    isActive: true,\r\n    pointsCloudFile: null,\r\n}\r\n\r\n//Todo: remake using Immer\r\nconst slice = createSlice({\r\n    name: \"pointCloudSection\",\r\n    initialState: defaultState,\r\n    reducers: {\r\n        pointCloudLoadFile(state: PointCloudSectionState, action: PayloadAction<File>) {\r\n            return update(state, {\r\n                pointsCloudFile: {$set: action.payload}\r\n            });\r\n        },\r\n        showPointCloudFiltersPanel(state: PointCloudSectionState) {\r\n            return update(state, {\r\n                isActive: {$set: true}\r\n            });\r\n        },\r\n        closePointCloudFiltersPanel(state: PointCloudSectionState) {\r\n            return update(state, {\r\n                isActive: {$set: false}\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\nexport const pointCloudFiltersPanelActivitySelector: Selector<ApplicationState, boolean> =\r\n    state => state.ui.sections.pointCloudSection.isActive;\r\n\r\nconst {actions, reducer} = slice;\r\nexport const {pointCloudLoadFile, showPointCloudFiltersPanel, closePointCloudFiltersPanel} = actions;\r\nexport default reducer;","import {createSlice, Selector} from \"@reduxjs/toolkit\";\r\nimport {ApplicationState} from \"../../../store\";\r\nimport update from \"immutability-helper\";\r\n\r\nexport interface PointCloudFiltersState {\r\n    filterXFromLimit: number,\r\n    filterXToLimit: number,\r\n    filterYFromLimit: number,\r\n    filterYToLimit: number,\r\n    filterZFromLimit: number,\r\n    filterZToLimit: number,\r\n};\r\n\r\nconst defaultState: PointCloudFiltersState = {\r\n    filterXFromLimit: -5,\r\n    filterXToLimit: 5,\r\n    filterYFromLimit: -5,\r\n    filterYToLimit: 5,\r\n    filterZFromLimit: -5,\r\n    filterZToLimit: 5\r\n};\r\n\r\nconst slice = createSlice({\r\n    name: \"pointCloudFiltersPanel\",\r\n    initialState: defaultState,\r\n    reducers: {\r\n        changeXFromLimit: (state: PointCloudFiltersState, action) =>\r\n            update(state, {\r\n                filterXFromLimit: {$set: action.payload}\r\n            }),\r\n        changeXToLimit: (state: PointCloudFiltersState, action) =>\r\n            update(state, {\r\n                filterXToLimit: {$set: action.payload}\r\n            }),\r\n        changeYFromLimit: (state: PointCloudFiltersState, action) =>\r\n            update(state, {\r\n                filterYFromLimit: {$set: action.payload}\r\n            }),\r\n        changeYToLimit: (state: PointCloudFiltersState, action) =>\r\n            update(state, {\r\n                filterYToLimit: {$set: action.payload}\r\n            }),\r\n        changeZFromLimit: (state: PointCloudFiltersState, action) =>\r\n            update(state, {\r\n                filterZFromLimit: {$set: action.payload}\r\n            }),\r\n        changeZToLimit: (state: PointCloudFiltersState, action) =>\r\n            update(state, {\r\n                filterZToLimit: {$set: action.payload}\r\n            })\r\n    }\r\n});\r\n\r\nexport const getPointCloudFiltersPanelSelector: Selector<ApplicationState, PointCloudFiltersState> =\r\n    state => state.ui.panels.pointCloudFiltersPanel;\r\n\r\nconst {actions, reducer} = slice\r\nexport const {changeXFromLimit, changeXToLimit, changeYFromLimit, changeYToLimit, changeZFromLimit, changeZToLimit} = actions\r\nconst pointCloudFiltersPanel = reducer\r\nexport default pointCloudFiltersPanel","import rootReducer from './rootReducer'\r\nimport {applyMiddleware, compose, createStore} from \"redux\";\r\nimport loadState from \"./loadState\";\r\nimport {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\r\nimport thunk from 'redux-thunk';\r\nimport {useDispatch} from \"react-redux\";\r\nimport logger from 'redux-logger';\r\n\r\nexport const composeEnhancers =\r\n    (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer(),\r\n    preloadedState: loadState(),\r\n    middleware: [logger],\r\n    devTools: process.env.NODE_ENV !== 'production'\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type ApplicationState = ReturnType<typeof store.getState>;\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();","import {combineReducers} from 'redux'\r\nimport uiReducer from \"./ui/uiReducer\";\r\n\r\nexport default function rootReducer() {\r\n    return combineReducers({\r\n        ui: uiReducer(),\r\n    });\r\n};","import {combineReducers} from \"redux\";\r\nimport uiSectionsReducer from \"./sections/uiSectionsReducer\";\r\nimport uiPanelReducer from \"./panels/uiPanelsReducer\";\r\n\r\nexport default function uiReducer() {\r\n    return combineReducers({\r\n            sections: uiSectionsReducer(),\r\n            panels: uiPanelReducer()\r\n        }\r\n    )\r\n}","import {combineReducers} from \"redux\";\r\nimport {default as pointCloudSectionReducer} from \"./pointCloudSection/pointCloudSection\";\r\n\r\nexport default function uiSectionsReducer() {\r\n    return combineReducers({\r\n        pointCloudSection: pointCloudSectionReducer\r\n    })\r\n}","import {combineReducers} from \"redux\";\r\nimport pointCloudFiltersPanel from \"./pointCloudFiltersPanel/pointCloudFiltersPanel\";\r\n\r\nexport default function uiPanelReducer() {\r\n    return combineReducers({\r\n        pointCloudFiltersPanel: pointCloudFiltersPanel\r\n    })\r\n}","//Todo: load state from database\r\nexport default function loadState() {\r\n    return {};\r\n}","import * as React from \"react\";\r\nimport Draggable from 'react-draggable';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {\r\n    closePointCloudFiltersPanel, pointCloudFiltersPanelActivitySelector,\r\n    showPointCloudFiltersPanel\r\n} from \"../../../../store/ui/sections/pointCloudSection/pointCloudSection\";\r\nimport {ApplicationState, useAppDispatch} from \"../../../../store/store\";\r\nimport {createSelector, Selector} from \"@reduxjs/toolkit\";\r\nimport {\r\n    changeXFromLimit,\r\n    changeXToLimit,\r\n    changeYFromLimit,\r\n    changeYToLimit,\r\n    changeZFromLimit,\r\n    changeZToLimit,\r\n    getPointCloudFiltersPanelSelector,\r\n    PointCloudFiltersState\r\n} from \"../../../../store/ui/panels/pointCloudFiltersPanel/pointCloudFiltersPanel\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {isNumeric} from \"rxjs/internal-compatibility\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst dataSelector = createSelector([pointCloudFiltersPanelActivitySelector,\r\n    getPointCloudFiltersPanelSelector], (isActive: boolean, filtersState: PointCloudFiltersState) =>\r\n    ({\r\n        isActive,\r\n        filtersState\r\n    })\r\n);\r\n\r\nconst WindowPanels = () => {\r\n    const dispatch = useAppDispatch()\r\n    const props = useSelector(dataSelector)\r\n    const filter = props.filtersState\r\n\r\n    return (\r\n        <div style={{\r\n            position: \"fixed\",\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            background: \"transparent\",\r\n            pointerEvents: \"none\"\r\n        }}>\r\n            <Draggable bounds=\"parent\" handle=\"strong\">\r\n\r\n                <div style={\r\n                    {\r\n                        height: 255,\r\n                        width: 250,\r\n                        background: \"#e8e8e8\",\r\n                        borderRadius: 5,\r\n                        pointerEvents: \"auto\",\r\n                        visibility: props.isActive ? \"visible\" : \"hidden\"\r\n                    }}>\r\n\r\n                    <div>\r\n                        <strong>\r\n                            <div style={{\r\n                                cursor: \"move\",\r\n                                background: \"#e6739f\",\r\n                                borderTopLeftRadius: 5,\r\n                                borderTopRightRadius: 5,\r\n                                color: \"white\",\r\n                                textAlign: \"center\",\r\n                                height: 30\r\n                            }}>\r\n                                <div style={{\r\n                                    marginLeft: \"8px\",\r\n                                    alignContent: \"center\",\r\n                                    display: \"inline-block\"\r\n                                }}>\r\n                                    <Typography variant=\"subtitle1\"> Фильтр облака точек</Typography>\r\n\r\n                                </div>\r\n                                <Tooltip title=\"Закрыть\"\r\n                                         style={{\r\n                                             float: \"right\"\r\n                                         }}>\r\n                                    <label>\r\n                                        <IconButton\r\n                                            component=\"span\"\r\n                                            size=\"small\"\r\n                                            onClick={() => dispatch(closePointCloudFiltersPanel())}\r\n                                            color=\"primary\">\r\n                                            <CloseIcon style={{color: \"white\"}}/>\r\n                                        </IconButton>\r\n                                    </label>\r\n                                </Tooltip>\r\n                            </div>\r\n                        </strong>\r\n                        <div style={{marginLeft: \"13px\"}}>\r\n                            <div style={{marginTop: 16}}>\r\n                                <TextField\r\n                                    id=\"outlined-number\"\r\n                                    label=\"X FROM\"\r\n                                    type=\"number\"\r\n                                    name={\"x-from\"}\r\n                                    step=\"0.1\"\r\n                                    value={filter.filterXFromLimit}\r\n                                    onChange={event => {\r\n                                        const value = event.target.value;\r\n                                        if (isNumeric(value))\r\n                                            dispatch(changeXFromLimit(value))\r\n                                    }}\r\n                                    style={{width: 100, height: 20}}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        step: 0.1\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                                <TextField\r\n                                    id=\"outlined-number\"\r\n                                    label=\"X TO\"\r\n                                    type=\"number\"\r\n                                    name={\"x-to\"}\r\n                                    step=\"0.1\"\r\n                                    value={filter.filterXToLimit}\r\n                                    onChange={event => dispatch(changeXToLimit(event.target.value))}\r\n                                    style={{width: 100, marginLeft: 24}}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        step: 0.1\r\n                                    }}\r\n                                    variant=\"outlined\"/>\r\n                            </div>\r\n                            <div style={{marginTop: 12}}>\r\n                                <TextField\r\n                                    id=\"outlined-number\"\r\n                                    label=\"Y FROM\"\r\n                                    type=\"number\"\r\n                                    name={\"y-from\"}\r\n                                    step=\"0.1\"\r\n                                    value={filter.filterYFromLimit}\r\n                                    onChange={event => dispatch(changeYFromLimit(event.target.value))}\r\n                                    style={{width: 100, height: 20}}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        step: 0.1\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                                <TextField\r\n                                    id=\"outlined-number\"\r\n                                    label=\"Y TO\"\r\n                                    type=\"number\"\r\n                                    name={\"y-to\"}\r\n                                    step=\"0.1\"\r\n                                    value={filter.filterYToLimit}\r\n                                    onChange={event => dispatch(changeYToLimit(event.target.value))}\r\n                                    style={{width: 100, marginLeft: 24}}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        step: 0.1\r\n                                    }}\r\n                                    variant=\"outlined\"/>\r\n                            </div>\r\n                            <div style={{marginTop: 12}}>\r\n                                <TextField\r\n                                    id=\"outlined-number\"\r\n                                    label=\"Z FROM\"\r\n                                    type=\"number\"\r\n                                    name={\"z-from\"}\r\n                                    step=\"0.1\"\r\n                                    value={filter.filterZFromLimit}\r\n                                    onChange={event => dispatch(changeZFromLimit(event.target.value))}\r\n                                    style={{width: 100, height: 20}}\r\n                                    InputLabelProps={{\r\n                                        shrink: true\r\n                                    }}\r\n                                    inputProps={{\r\n                                        step: 0.1\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                                <TextField\r\n                                    id=\"outlined-number\"\r\n                                    label=\"Z TO\"\r\n                                    type=\"number\"\r\n                                    name={\"z-to\"}\r\n                                    step=\"0.1\"\r\n                                    value={filter.filterZToLimit}\r\n                                    onChange={event => dispatch(changeZToLimit(event.target.value))}\r\n                                    style={{width: 100, marginLeft: 24}}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    inputProps={{\r\n                                        step: 0.1\r\n                                    }}\r\n                                    variant=\"outlined\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Draggable>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WindowPanels;","export default class SolidPoint {\r\n\r\n    private _x: number = 0;\r\n    get x() {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        this._x = value;\r\n    }\r\n\r\n    private _y: number = 0;\r\n    get y() {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        this._y = value;\r\n    }\r\n\r\n    private _z: number = 0;\r\n    get z() {\r\n        return this._z;\r\n    }\r\n\r\n    set z(value: number) {\r\n        this._z = value;\r\n    }\r\n\r\n    private _parameter: number = 0;\r\n    get parameter() {\r\n        return this._parameter;\r\n    }\r\n\r\n    set parameter(value: number) {\r\n        this._parameter = value;\r\n    }\r\n\r\n    constructor(x: number, y: number, z: number, parameter: number) {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._z = z;\r\n        this._parameter = parameter;\r\n    }\r\n}","export default function calculateMinMaxOfArray(array : Array<number>) {\r\n    const arrayLength = array.length;\r\n    const borderIncrement = 125000;\r\n    let arrayCounter = 0;\r\n    let lastBottomBorder = 0;\r\n    let lastTopBorder = borderIncrement;\r\n    let minValue = 0;\r\n    let maxValue = 0;\r\n\r\n    while (true) {\r\n        const arrayPart = array.slice(lastBottomBorder, lastTopBorder)\r\n\r\n        let min = Math.min(...arrayPart);\r\n        let max = Math.max(...arrayPart);\r\n\r\n        minValue = min < minValue ? min : minValue;\r\n        maxValue = max > maxValue ? max : maxValue;\r\n\r\n        lastBottomBorder += borderIncrement;\r\n        lastTopBorder += borderIncrement;\r\n        arrayCounter += arrayPart.length;\r\n\r\n        if (arrayCounter >= arrayLength)\r\n            break;\r\n    }\r\n\r\n    return {min: minValue, max: maxValue};\r\n}","import SolidPoint from \"./SolidPoint\";\r\nimport {PointCloudFiltersState} from \"../../../../../store/ui/panels/pointCloudFiltersPanel/pointCloudFiltersPanel\";\r\n\r\nexport default function filterPointCloud(points: SolidPoint[], cloudPointFilters: PointCloudFiltersState): SolidPoint[] {\r\n    const filteredPoints = points.filter(point => {\r\n        const {x, y, z} = point\r\n\r\n        if ((x >= cloudPointFilters.filterXFromLimit && x <= cloudPointFilters.filterXToLimit)\r\n            &&\r\n            (y >= cloudPointFilters.filterYFromLimit && y <= cloudPointFilters.filterYToLimit)\r\n            &&\r\n            (z >= cloudPointFilters.filterZFromLimit && z <= cloudPointFilters.filterZToLimit)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    });\r\n\r\n    return filteredPoints;\r\n}","import * as BABYLON from \"babylonjs\";\r\nimport {Scene} from \"babylonjs/scene\";\r\nimport {Particle} from \"babylonjs/Particles/particle\";\r\nimport filterPointCloud from \"./filterPointCloud\";\r\nimport SolidPoint from \"./SolidPoint\";\r\nimport {Mesh} from \"babylonjs/Meshes/mesh\";\r\nimport {PointCloudFiltersState} from \"../../../../../store/ui/panels/pointCloudFiltersPanel/pointCloudFiltersPanel\";\r\nimport {PointsCloudSystem} from \"babylonjs/Particles/pointsCloudSystem\";\r\n\r\nexport default async function constructPointCloud(scene: Scene,\r\n                                                  points: SolidPoint[],\r\n                                                  parameterMin: number,\r\n                                                  parameterMax: number,\r\n                                                  cloudPointFilters: PointCloudFiltersState): Promise<PointsCloudSystem> {\r\n\r\n\r\n    const filteredPoints: SolidPoint[] = filterPointCloud(points,cloudPointFilters);\r\n\r\n    const pointsCloudSystem = new BABYLON.PointsCloudSystem(\"pcs\", 2, scene, {updatable: false});\r\n\r\n    const diffP = parameterMax - parameterMin;\r\n    let constructParticle = (particle: Particle, i: number, _: any) => {\r\n        let point = filteredPoints[i];\r\n        const pPercent = ((point.parameter - parameterMin) / diffP) * 100;\r\n\r\n        let r: number = 0;\r\n        let g: number = 0;\r\n        let b: number = 0;\r\n\r\n        if (pPercent <= 0) {\r\n            r = 0;\r\n            g = 0;\r\n            b = 0;\r\n        } else if (pPercent > 0 && pPercent <= 25) {\r\n            r = 255;\r\n            g = 0 - ((0 - 255) / (0 - 25)) * (0 - pPercent);\r\n            b = 0;\r\n        } else if (pPercent > 25 && pPercent <= 50) {\r\n            r = 255 - ((255 - 0) / (25 - 50)) * (25 - pPercent);\r\n            g = 255;\r\n            b = 0;\r\n        } else if (pPercent > 50 && pPercent <= 75) {\r\n            r = 0;\r\n            g = 255;\r\n            b = 0 - ((0 - 255) / (50 - 100)) * (50 - pPercent);\r\n        } else if (pPercent > 75 && pPercent <= 100) {\r\n            r = 0;\r\n            g = 255 - ((255 - 0) / (75 - 100)) * (75 - pPercent);\r\n            b = 255;\r\n        } else if (pPercent > 100) {\r\n            r = 0;\r\n            g = 0;\r\n            b = 0;\r\n        }\r\n\r\n        particle.position = new BABYLON.Vector3(point.x, point.y, point.z);\r\n        particle.color = new BABYLON.Color4(r / 255, g / 255, b / 255, 1)\r\n    }\r\n\r\n    const pointsCount = filteredPoints.length;\r\n    pointsCloudSystem.addPoints(pointsCount, constructParticle);\r\n    const mesh = await pointsCloudSystem.buildMeshAsync();\r\n    return pointsCloudSystem;\r\n}","import {Selector, useSelector} from \"react-redux\";\r\nimport {ApplicationState} from \"../../../../../store/store\";\r\nimport {createSelector} from \"@reduxjs/toolkit\";\r\nimport {\r\n    getPointCloudFiltersPanelSelector,\r\n    PointCloudFiltersState\r\n} from \"../../../../../store/ui/panels/pointCloudFiltersPanel/pointCloudFiltersPanel\";\r\nimport setUpPointCloud from \"./setUpPointCloud\";\r\nimport * as React from \"react\";\r\n\r\n\r\nconst pointCloudFileSelector: Selector<ApplicationState, File | null> = state => state.ui.sections.pointCloudSection.pointsCloudFile;\r\n\r\nconst dataSelector = createSelector([getPointCloudFiltersPanelSelector, pointCloudFileSelector],\r\n    (pointCloudFilters: PointCloudFiltersState, file: File | null) => {\r\n        return {\r\n            pointCloudFilters,\r\n            file\r\n        }\r\n    })\r\n\r\nconst PointCloud = () => {\r\n    const props = useSelector(dataSelector);\r\n    const cloudPointFilters = props.pointCloudFilters\r\n    const cloudPointFile = props.file\r\n\r\n    if (cloudPointFile && cloudPointFile !== null)\r\n        setUpPointCloud(cloudPointFile, cloudPointFilters);\r\n\r\n    return (\r\n        <div style={{\r\n            position: \"fixed\",\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            background: \"transparent\",\r\n            pointerEvents: \"none\"\r\n        }}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PointCloud","import SolidPoint from \"./SolidPoint\";\r\nimport calculateMinMaxOfArray from \"../../../../../utilities/math/calculateMaxMinOfArray\";\r\nimport constructPointCloud from \"./constructPointCloud\";\r\nimport IoC from \"../../../../../environment/ioc/IoC\";\r\nimport ApiProvider from \"../../../../../services/apiProvider/ApiProvider\";\r\nimport {Scene} from \"babylonjs/scene\";\r\nimport {PointCloudFiltersState} from \"../../../../../store/ui/panels/pointCloudFiltersPanel/pointCloudFiltersPanel\";\r\nimport {PointsCloudSystem} from \"babylonjs/Particles/pointsCloudSystem\";\r\n\r\nexport default function setUpPointCloud(file: File, cloudPointFilters: PointCloudFiltersState) {\r\n    const reader: FileReader = new FileReader()\r\n\r\n    reader.onload = async (e: ProgressEvent<FileReader>) => {\r\n        const fileLines: string[] = [];\r\n        const text: string = <string>(reader.result)\r\n        let lines: string[] = text.split('\\n');\r\n        lines.forEach((line) => {\r\n            fileLines.push(line.slice(0, -1));\r\n        });\r\n\r\n        const points: SolidPoint[] = fileLines.map((line: string) => {\r\n            const points: string[] = line.split(';');\r\n            const x: number = Number.parseFloat(points[0] ? points[0].replace(',', '.') : \"0\");\r\n            const y: number = Number.parseFloat(points[1] ? points[1].replace(',', '.') : \"0\");\r\n            const z: number = Number.parseFloat(points[2] ? points[2].replace(',', '.') : \"0\");\r\n            const p: number = Number(points[3] ? points[3].replace(',', '.') : \"0\");\r\n\r\n            return new SolidPoint(x, y, z, p);\r\n        });\r\n\r\n        const parameters = points.map(p => p.parameter);\r\n        const {max, min} = calculateMinMaxOfArray(parameters);\r\n        const parameterMin = min;\r\n        const parameterMax = max;\r\n\r\n        const apiProvider: ApiProvider = IoC.get(Symbol.for(\"API_PROVIDER_SERVICE\"));\r\n        const scene = apiProvider.sceneRootApi.scene as Scene;\r\n\r\n        const sceneRootApi = apiProvider.sceneRootApi;\r\n        if (sceneRootApi.pointsCloudSystem && apiProvider.sceneRootApi.pointsCloudSystem !== null) {\r\n            sceneRootApi.pointsCloudSystem.dispose()\r\n            sceneRootApi.pointsCloudSystem = null;\r\n        }\r\n\r\n        const pointsCloudSystem = await constructPointCloud(scene, points, parameterMin, parameterMax, cloudPointFilters);\r\n        apiProvider.sceneRootApi.pointsCloudSystem = pointsCloudSystem;\r\n    };\r\n\r\n    const blob: Blob = <Blob>file;\r\n    reader.readAsText(blob);\r\n}","import React, {Component, useState} from 'react';\r\nimport * as BABYLON from 'babylonjs';\r\nimport styled from 'styled-components';\r\nimport Card from '@material-ui/core/Card';\r\nimport {createMuiTheme} from '@material-ui/core/styles';\r\nimport {\r\n    withStyles,\r\n    MuiThemeProvider\r\n} from \"@material-ui/core/styles\";\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport * as eventTypes from \"../../../../services/eventBus/EventTypes\";\r\nimport {EventBusService} from \"../../../../services/eventBus/EventBusService\";\r\nimport IoC from \"../../../../environment/ioc/IoC\";\r\nimport * as EventTypes from \"../../../../services/eventBus/EventTypes\";\r\nimport isCanvasSupported from \"../../../../utilities/dom/isCanvasSupported\";\r\nimport setupScene from \"./setup/scene/setupScene\";\r\nimport setupCamera from \"./setup/camera/setupCamera\";\r\nimport setupLight from \"./setup/light/setupLight\";\r\nimport {Engine} from \"babylonjs/Engines/engine\";\r\nimport {Light} from \"babylonjs/Lights/light\";\r\nimport {ArcRotateCamera} from \"babylonjs/Cameras/arcRotateCamera\";\r\nimport setupZoom from \"./setup/scene/setupZoom\";\r\nimport setUpPointCloud from \"./pointCloudSystem/setUpPointCloud\";\r\nimport SceneRootApi from \"./base/SceneRootApi\";\r\nimport ApiProvider from \"../../../../services/apiProvider/ApiProvider\";\r\nimport {Particle} from \"babylonjs/Particles/particle\";\r\nimport * as ServiceTypes from \"../../../../environment/ioc/ServiceTypes\";\r\nimport Draggable from 'react-draggable';\r\nimport {connect, Selector, useDispatch, useSelector} from \"react-redux\";\r\nimport {ApplicationState, useAppDispatch} from \"../../../../store/store\";\r\nimport WindowPanels from \"./WindowPanels\";\r\nimport {createSelector} from \"@reduxjs/toolkit\";\r\nimport {\r\n    getPointCloudFiltersPanelSelector,\r\n    PointCloudFiltersState\r\n} from \"../../../../store/ui/panels/pointCloudFiltersPanel/pointCloudFiltersPanel\";\r\nimport filterPointCloud from \"./pointCloudSystem/filterPointCloud\";\r\nimport PointCloud from \"./pointCloudSystem/PointCloud\";\r\n\r\n\r\nconst Scene = () => {\r\n    const dispatch = useAppDispatch();\r\n\r\n    // const eventBus: EventBusService = IoC.get(Symbol.for(\"EVENT_BUS_SERVICE\"));\r\n    // eventBus.subscribe(EventTypes.CLOUD_POINTS_FILE_LOADED.toString(), onCloudPointsFileLoaded);\r\n\r\n    function initialize(canvas: HTMLCanvasElement) {\r\n        if (!isCanvasSupported()) {\r\n            console.log('canvas is not supported!');\r\n            alert('canvas is not supported!');\r\n        }\r\n        const apiProvider: ApiProvider = IoC.get(Symbol.for(\"API_PROVIDER_SERVICE\")); //Todo: understand why\r\n        const sceneRootApi = apiProvider.sceneRootApi;\r\n\r\n        const engine: Engine = new BABYLON.Engine(canvas, true);\r\n        sceneRootApi.engine = engine;\r\n\r\n        const scene: BABYLON.Scene = setupScene(engine);\r\n        sceneRootApi.scene = scene;\r\n\r\n        const camera: ArcRotateCamera = setupCamera(canvas, scene);\r\n        sceneRootApi.camera = camera;\r\n\r\n        const light: Light = setupLight(scene);\r\n        sceneRootApi.light = light;\r\n\r\n        setupZoom(scene, engine, camera);\r\n    }\r\n\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            primary: {\r\n                light: '#757ce8',\r\n                main: '#3f50b5',\r\n                dark: '#002884',\r\n                contrastText: '#fff',\r\n            },\r\n            secondary: {\r\n                light: '#ff7961',\r\n                main: '#f44336',\r\n                dark: '#ba000d',\r\n                contrastText: '#000',\r\n            },\r\n        },\r\n    });\r\n\r\n    return (\r\n        <MuiThemeProvider theme={theme}>\r\n            <div>\r\n                <canvas\r\n                    style={{\r\n                        outline: \"none\",\r\n                        display: \"block\", //remove scrollBars,\r\n                        margin: 0,\r\n                        height: '100%',\r\n                        width: '100%',\r\n                        position: \"fixed\"\r\n                    }}\r\n                    ref={canvas => {\r\n                        if (canvas != undefined && canvas) {\r\n                            initialize(canvas);\r\n                        }\r\n                    }}\r\n                />\r\n                <PointCloud/>\r\n                <WindowPanels/>\r\n            </div>\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nexport default Scene;\r\n","export default function isCanvasSupported() {\r\n    const elem = document.createElement('canvas');\r\n    return !!(elem.getContext && elem.getContext('2d'));\r\n}","import * as BABYLON from 'babylonjs';\r\nimport {ArcRotateCamera} from \"babylonjs/Cameras/arcRotateCamera\";\r\n\r\nexport default function setupCamera(canvas: HTMLCanvasElement, scene: BABYLON.Scene): ArcRotateCamera {\r\n    const camera: ArcRotateCamera = new BABYLON.ArcRotateCamera('Camera', 0, 0, -100, new BABYLON.Vector3(1, 2, -3), scene);\r\n\r\n    camera.setPosition(new BABYLON.Vector3(0, 0, -100));\r\n    camera.target = new BABYLON.Vector3(0, 0, 0);\r\n    camera.orthoLeft = -8;\r\n    camera.orthoRight = 8;\r\n    const ratio = canvas.height / canvas.width;\r\n    camera.orthoTop = camera.orthoRight * ratio;\r\n    camera.orthoBottom = camera.orthoLeft * ratio;\r\n\r\n    camera.attachControl(canvas, false);\r\n    camera.alpha += Math.PI; // camera +180°\r\n    camera.attachControl(canvas, true, false, 0);\r\n    camera.mode = BABYLON.Camera.ORTHOGRAPHIC_CAMERA;\r\n\r\n    camera.lowerRadiusLimit = camera.radius;\r\n    camera.upperRadiusLimit = camera.radius;\r\n    return camera;\r\n}","import * as BABYLON from \"babylonjs\";\r\nimport {Light} from \"babylonjs/Lights/light\";\r\n\r\nexport default function setupLight(scene : BABYLON.Scene) : Light {\r\n    const light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n    light.intensity = 0.7;\r\n\r\n    return light;\r\n}","import React, {Component, useState} from 'react';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nconst StatePanel = () => {\r\n    return (\r\n        <div style={{background: \"#0582ca\", height: 30}}>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StatePanel;","import 'reflect-metadata';\r\nimport React, {Fragment} from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {ThemeProvider} from \"styled-components\";\r\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport FilterTiltShiftIcon from '@material-ui/icons/FilterTiltShift';\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {ApplicationState, useAppDispatch} from \"../../../../store/store\";\r\nimport { pointCloudLoadFile, showPointCloudFiltersPanel } from \"../../../../store/ui/sections/pointCloudSection/pointCloudSection\";\r\n\r\nexport const InstrumentalPanel = () => {\r\n    const instrumentalPanelState = useSelector<ApplicationState>(state => state);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const redTheme = createMuiTheme({palette: {primary: green}});\r\n    return (\r\n        <ThemeProvider theme={redTheme}>\r\n            <div style={{height: 35, background: \"#c3aed6\"}}>\r\n                <Fragment>\r\n                    <input\r\n                        color=\"primary\"\r\n                        type=\"file\"\r\n                        onChange={(e) => {\r\n                            e.preventDefault();\r\n                            const file: File = e.target.files?.[0] as File;\r\n                            if (file && file !== undefined) {\r\n                                dispatch(pointCloudLoadFile(file));\r\n                            }\r\n                        }}\r\n                        id=\"icon-button-file\"\r\n                        style={{display: 'none',}}/>\r\n                    <Tooltip title=\"Загрузить файл с облаком точек\" style={{marginLeft: 5}}>\r\n                        <label htmlFor=\"icon-button-file\">\r\n                            <IconButton\r\n                                component=\"span\"\r\n                                size=\"small\"\r\n                                color=\"primary\">\r\n                                <CloudUploadIcon style={{color: \"white\"}}/>\r\n                            </IconButton>\r\n                        </label>\r\n                    </Tooltip>\r\n                </Fragment>\r\n                <Tooltip title=\"Открыть панель с фильтрами облака точек\">\r\n                    <IconButton size={\"small\"}\r\n                                color={\"primary\"}\r\n                                onClick={() =>\r\n                                    dispatch(showPointCloudFiltersPanel())}\r\n                                style={{verticalAlign: \"bottom\", marginLeft: 10}}>\r\n                        <FilterTiltShiftIcon style={{color: \"white\"}}/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n};","import React, {useState} from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\n\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        width: 250,\r\n    },\r\n    fullList: {\r\n        width: 'auto',\r\n    },\r\n});\r\n\r\nexport default function TemporarySidePanel() {\r\n    const classes = useStyles();\r\n    const [state, setState] = useState({\r\n        top: false,\r\n        left: false,\r\n        bottom: false,\r\n        right: false,\r\n    });\r\n\r\n    const toggleDrawer = (anchor, open) => (event) => {\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n\r\n        setState({...state, [anchor]: open});\r\n    };\r\n\r\n    const list = (anchor) => (\r\n        <div\r\n            className={clsx(classes.list, {\r\n                [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n            })}\r\n            role=\"presentation\"\r\n            onClick={toggleDrawer(anchor, false)}\r\n            onKeyDown={toggleDrawer(anchor, false)}\r\n        >\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            {['left', 'right', 'top', 'bottom'].map((anchor) => (\r\n                <React.Fragment key={anchor}>\r\n                    <Button onClick={toggleDrawer(anchor, true)}>{anchor}</Button>\r\n                    <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\r\n                        {list(anchor)}\r\n                    </Drawer>\r\n                </React.Fragment>\r\n            ))}\r\n        </div>\r\n    );\r\n}","import React, {useState} from \"react\";\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport {createMuiTheme} from \"@material-ui/core\";\r\nimport {ThemeProvider} from \"styled-components\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport TemporarySidePanel from \"../../sidePanels/temporarySidePanel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport clsx from 'clsx';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\n\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        width: 250,\r\n    },\r\n    fullList: {\r\n        width: 'auto',\r\n    },\r\n});\r\n\r\nfunction HeaderPanel() {\r\n    const classes = useStyles();\r\n    const [state, setState] = useState({\r\n        top: false,\r\n        left: false,\r\n        bottom: false,\r\n        right: false,\r\n    });\r\n\r\n    const toggleDrawer = (anchor, open) => (event) => {\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n\r\n        setState({...state, [anchor]: open});\r\n    };\r\n\r\n    const list = (anchor) => (\r\n        <div\r\n            className={clsx(classes.list, {\r\n                [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n            })}\r\n            role=\"presentation\"\r\n            onClick={toggleDrawer(anchor, false)}\r\n            onKeyDown={toggleDrawer(anchor, false)}\r\n        >\r\n\r\n        </div>\r\n    );\r\n\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            primary: {\r\n                main: \"#46ad8d\",\r\n                contrastText: \"white\" //button text white instead of black\r\n            },\r\n            background: {\r\n                default: \"#394764\"\r\n            }\r\n        }\r\n    });\r\n\r\n    function userAccountClick() {\r\n        toggleDrawer('left', true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ThemeProvider theme={theme}>\r\n                <div style={{background: \"#8675a9\", height: 50, display: \"flex\", justifyContent: \"flex-end\"}}>\r\n                    <div style={{verticalAlign: \"middle\"}}>\r\n                        {['left', 'right', 'top', 'bottom'].map((anchor) => (\r\n                            <React.Fragment key={anchor}>\r\n                                <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\r\n                                    {list(anchor)}\r\n                                </Drawer>\r\n                            </React.Fragment>\r\n                        ))}\r\n                    </div>\r\n                    <Tooltip title=\"Аккаунт пользователя\">\r\n                        <IconButton size={\"medium\"}\r\n                                    color={\"primary\"}\r\n                                    onClick={toggleDrawer('left', true)}\r\n                                    style={{verticalAlign: \"bottom\", marginLeft: 10}}>\r\n                            <AccountCircleIcon style={{color: \"white\", fontSize: 35}}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </div>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeaderPanel;","import React from 'react';\nimport './App.css';\nimport Scene from \"./components/base/scene/Scene\";\nimport StatePanel from \"./components/base/statePanel/StatePanel\";\nimport {InstrumentalPanel} from \"./components/base/instrumentalPanel/InstrumentalPanel\";\nimport HeaderPanel from \"./components/base/headerPanel/HeaderPanel\";\nimport {Grid, Col, Row} from 'react-styled-flexboxgrid'\nimport {ThemeProvider} from 'styled-components'\nimport {maxHeight} from \"styled-system\";\n\nconst theme = {\n    flexboxgrid: {\n        // Defaults\n        gridSize: 12, // columns\n        gutterWidth: 1, // rem\n        outerMargin: 0, // rem\n        mediaQuery: 'only screen',\n        height: 1000,\n        container: {\n            sm: 46, // rem\n            md: 61, // rem\n            lg: 76  // rem\n        },\n        breakpoints: {\n            xs: 0,  // em\n            sm: 48, // em\n            md: 64, // em\n            lg: 75  // em\n        }\n    }\n}\n\nfunction App() {\n    const {innerWidth: windowWidth, innerHeight: windowHeight} = window;\n\n    return (\n        <div style={{height: '100%'}}>\n            <ThemeProvider theme={theme}>\n                <Grid fluid={true}>\n                    <Row>\n                        <Col xs>\n                            <HeaderPanel/>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs>\n                            <InstrumentalPanel/>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs>\n                            <Scene/>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs>\n                            <StatePanel/>\n                        </Col>\n                    </Row>\n                </Grid>\n            </ThemeProvider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n//import {PersistGate} from 'redux-persist/lib/integration/react';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}